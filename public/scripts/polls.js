/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var Poll = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="poll">
        <h2 className="pollUsstate">
          {this.props.usstate}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var PollBox = React.createClass({
  loadPollsFromServer: function() {
    console.log("Fetching json file: " + Date.now());
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        console.log("Processing json file: " + Date.now());
        var pollresult = [];
        var pickint = 0;
        var stateid = 0;
        for (var j = 0; j < data.length; j++){
          //console.log("data.id: " + data[j].id + ", data.usstate: " + data[j].usstate + ", data.pick: " + data[j].pick);
          pickint = parseInt(data[j].pick);
          stateid = parseInt(data[j].usstate);
          if ( pickint == 0 ) { pickint = -1 };
          if ( undefined != pollresult[stateid] ) {
            pollresult[stateid].picksum += pickint;
            if (pollresult[stateid].picksum > 0) { pollresult[stateid].result = 1 } else { pollresult[stateid].result = 0 };
          } else {
      	    pollresult[stateid] = {};
            pollresult[stateid].id = data[j].id;
            pollresult[stateid].usstate = data[j].usstate;
      	    pollresult[stateid].picksum = pickint;
      	    pollresult[stateid].result = parseInt(data[j].pick);
          }
        }
        console.log("Finished json file: " + Date.now());
        var polls = [];
        for (var j = 0; j < pollresult.length; j++){
          if(undefined != pollresult[j] && pollresult[j] != null) {
            console.log("pollresult.id: " + pollresult[j].id + ", pollresult.usstate: " + pollresult[j].usstate + ", pollresult.picksum: " + pollresult[j].picksum + ", pollresult.result: " + pollresult[j].result);
            polls = polls.concat([pollresult[j]]);
            politify(pollresult[j].result,pollresult[j].usstate);
          }
        }
        this.setState({data: polls});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handlePollSubmit: function(poll) {
    var polls = this.state.data;
    // in production replace by id generated by server
    poll.id = Date.now();
    var index = 0;
    var foundstate = false;
    for ( var index = 0; index < polls.length; index++ ){
      if ( polls[index].usstate == poll.usstate ) {
      	var pickint = parseInt(poll.pick);
        if ( pickint == 0 ) { pickint = -1 };
      	if (polls[index].picksum += pickint > 0) { polls[index].result = 1 } else { polls[index].result = 0 };
      	foundstate = true;
      }
    }
    if (!foundstate) {
      // this is a new state pick
      var newpoll = {};
      newpoll.id = poll.id;
      if ( newpoll.picksum = parseInt(poll.pick) == 0 ) { newpoll.picksum == -1 };
      newpoll.result = parseInt(poll.pick);
      var newPolls = polls.concat([newpoll]);
    } else {
      // we adjusted state props in polls
      var newPolls = polls;
    }
    politify(poll.pick,poll.usstate);
    this.setState({data: newPolls});
    // add individual poll to polls.json, eventually use MongoDB
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: poll,
      success: function(data) {
      	this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: polls});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadPollsFromServer();
    setInterval(this.loadPollsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="pollBox">
        <h1>Polls</h1>
        <PollList data={this.state.data} />
        <PollForm onPollSubmit={this.handlePollSubmit} />
      </div>
    );
  }
});

var PollList = React.createClass({

  render: function() {
    //console.log(this.props.data);
    var pollNodes = this.props.data.map(function(pollresult) {
      return (
        <Poll usstate={pollresult.usstate}>
          {pollresult.result}
        </Poll>
      );
    });
    return (
      <div className="pollList">
        {pollNodes}
      </div>
    );
  }
});

var PollForm = React.createClass({
  //randomAutoPick: function () {
  //  {politify()}
  //},
  getInitialState: function() {
    return {pick: '', usstate: '', auto: 'off'};
  },
  handlePickChange: function(e) {
    this.setState({pick: e.target.value});
  },
  handleUsstateChange: function(e) {
    this.setState({usstate: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var pick = this.state.pick.trim();
    var usstate = this.state.usstate.trim();
    if (!usstate || !pick) {
      return;
    }
    this.props.onPollSubmit({pick: pick, usstate: usstate});
    this.setState({pick: '', usstate: ''});
  },
  render: function() {
    return (
      <form className="pollForm" onSubmit={this.handleSubmit}>
        <b>
          Simulate individual poll
        </b>
        <br/>
        <input
          type="text"
          placeholder="Party"
          value={this.state.pick}
          onChange={this.handlePickChange}
        />
        <input
          type="text"
          placeholder="State"
          value={this.state.usstate}
          onChange={this.handleUsstateChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <PollBox url="/api/polls" pollInterval={2000} />,
  document.getElementById('content')
);
